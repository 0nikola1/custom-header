{"configuration":[{"title":"Buttons","id":"buttons","url":"./#configuration/buttons","content_html":"---\ntitle: Buttons\nindex: 3\n---\n\n## Button Config Options\n\nOptions with a :warning: remove the ability to edit from the UI. See [important notes](#intro/notes) on how to restore the default header if needed.\n\n| NAME                     | TYPE    | DEFAULT | DESCRIPTION                                   |\n| :----------------------- | :------ | :------ | :-------------------------------------------- |\n| menu_hide                | Boolean | false   | Hides the menu button                         |\n| voice_hide               | Boolean | false   | Hides the voice button                        |\n| options_hide             | Boolean | false   | Hides the options button :warning:            |\n| menu_dropdown            | Boolean | false   | Places menu button in the options drop-down   |\n| voice_dropdown           | Boolean | false   | Places voice button in the options drop-down  |\n| reverse_button_direction | Boolean | false   | Places buttons at opposite side of the window |\n| button_icons             |         |         | Set the icon of each button, more info below  |\n| button_text              |         |         | Set text instead of an icon, more info below  |\n\n### Button Icons\n\nYou can set any of the button's icons using `button_icons`.\n\n```yaml\ncustom_header:\n  button_icons:\n    menu: mdi:skull\n    voice: mdi:home\n    options: mdi:death-star-variant\n```\n\n### Button Text\n\nYou can set any of the button's as text instead of icons using `button_text`.\nThe text may be 2 lines by using `<br>` to separate.\n\n```yaml\ncustom_header:\n  button_text:\n    menu: 'menu'\n    voice: 'voice<br>button'\n    # The next example is using templates. See templates page for more info.\n    options: '{{ time }}<br>{{ date }}'\n```\n","index":3},{"title":"Config","id":"config","url":"./#configuration/config","content_html":"---\ntitle: Config\nindex: 1\n---\n\n## Configuration\n\nMuch of the config can be done by using the UI editor which can be found by selecting \"Custom Header\" in the options menu of Lovelace (editor is not available in YAML mode). More options will be added to the UI editor as Custom Header progresses.\n\nEverything else is handled in YAML which would either be set in the raw config by selecting \"Configure UI\" and then \"Raw Config Editor\" or in the file `ui-lovelace.yaml` if you're using YAML mode.\n\nThe YAML configuration happens at the root of your Lovelace config under `custom_header:` at the same level as `resources:` and `views:`. Example:\n\n```yaml\ncustom_header:\n  compact_mode: true\nresources:\n  - url: /community_plugin/custom-header/custom-header.js\n    type: module\nviews:\n```\n","index":1},{"title":"Exception Config","id":"exceptions","url":"./#configuration/exceptions","content_html":"---\ntitle: Exception Config\nindex: 5\n---\n\n## Exception Configuration\n\nYou can have different settings depending on username, user agent, and media query. You can use any combination as well.\n\n- **user:** A user or a comma separated list of multiple users. This is the Home Assistant user's name, **not username** (if they're different). You can look to the bottom of the Custom Header editor or in the HA user list to see which to use. This option is case sensitive.\n- **user_agent:** A matching word or phrase from the devices user agent. You can find this at the bottom of the Custom Header settings or by [googling \"what's my user agent\"](http://www.google.com/search?q=whats+my+user+agent) on the device in question. This option is case sensitive, enclose in quotes if including special characters and not using editor.\n- **media_query:** A valid [CSS media query](https://www.w3schools.com/css/css_rwd_mediaqueries.asp). Enclose in quotes if not using editor.\n- **query_string:** A matching string following a question mark appended to the end of the URL (e.g. `http://192.168.1.42:8123/lovelace/0?kiosk`).\n\nUnder exceptions set your conditions and then set up the config to use below that. If a config item is left out of an exception's config the main config's value is used.\n\n```yaml\ncustom_header:\n  compact_mode: true\n  exceptions:\n    - conditions:\n        user: maykar\n      config:\n        hide_help: true\n        menu_dropdown: true\n    - conditions:\n        user: maykar, Bram Kragten, Ludeeus\n        user_agent: Mobile\n        media_query: \"(max-width: 600px)\"\n      config:\n        footer_mode: true\n        reverse_button_direction: true\n        reverse_tab_direction: true\n    - conditions:\n        query_string: kiosk\n      config:\n        kiosk_mode: true\n```\n","index":5},{"title":"Main Config","id":"main","url":"./#configuration/main","content_html":"---\ntitle: Main Config\nindex: 2\n---\n\n## Main Config Options\n\nOptions with a :warning: remove the ability to edit from the UI. See [important notes](#intro/notes) on how to restore the default header if needed.\n\n| NAME            | TYPE    | DEFAULT          | DESCRIPTION                                                                |\n| :-------------- | :------ | :--------------- | :------------------------------------------------------------------------- |\n| header_text     | string  | 'Home Assistant' | Replace the main header text, more info below                              |\n| disabled_mode   | Boolean | false            | Disables Custom Header and returns the default HA header                   |\n| kiosk_mode      | Boolean | false            | Hides the header and sidebar completely :warning:                          |\n| compact_mode    | Boolean | false            | Compacts the header to about half the size while keeping all functionality |\n| footer_mode     | Boolean | false            | Places the header at the bottom of the page                                |\n| disable_sidebar | Boolean | false            | Disables and hides the sidebar and menu button                             |\n| hide_header     | Boolean | false            | Hides the header, but still allows sidebar to be swiped on from left.      |\n| hide_help       | Boolean | false            | Hides the \"Help\" option in the options menu                                |\n| hide_unused     | Boolean | false            | Hides the \"Unused Entities\" option in the options menu                     |\n| hide_refresh    | Boolean | false            | Hides the \"Refresh\" option in the options menu                             |\n| hide_config     | Boolean | false            | Hides the \"Configure UI\" option in the options menu :warning:              |\n| hide_raw        | Boolean | false            | Hides the \"Raw Config Editor\" option in the options menu :warning:         |\n\n### Example\n\n```yaml\ncustom_header:\n  header_text: '{{ time }}' # See templates section for more on this.\n  compact_mode: true\n  footer_mode: true\n  hide_help: true\n```\n\n### Header Text\n\n```yaml\ncustom_header:\n  header_text: 'Custom Header'\n```\n\nThe text may be 2 lines by using `<br>` to separate.\n\n```yaml\ncustom_header:\n  header_text: 'Custom<br>Header'\n```\n\nThe next example uses [templates](#templates).\n\n```yaml\ncustom_header:\n  header_text: '{{ time }}<br>{{ date }}'\n```\n","index":2},{"title":"Tabs","id":"tabs","url":"./#configuration/tabs","content_html":"---\ntitle: Tabs\nindex: 4\n---\n\n## Tab Config Options\n\n| NAME                  | TYPE          | DEFAULT | DESCRIPTION                                                                                |\n| :-------------------- | :------------ | :------ | :----------------------------------------------------------------------------------------- |\n| chevrons              | Boolean       | true    | Enables/disables the scroll arrows for the tabs                                            |\n| indicator_top         | Boolean       | false   | Places the current tab indicator on top of the tab                                         |\n| default_tab           | number/string |         | The default starting tab when entering Lovelace                                            |\n| reverse_tab_direction | Boolean       | false   | Places tabs at opposite side of the window in reverse order                                |\n| hide_tabs             | string        |         | An array or comma separated string of tabs to hide, more info below                        |\n| show_tabs             | string        |         | An array or comma separated string of tabs to show, more info below                        |\n| hidden_tab_redirect   | Boolean       | true    | Automatically redirects off hidden tabs to either the default tab or the first visible tab |\n| tab_icons             | string        |         | Set the icon of each tab, useful for templates, more info below                            |\n\n### Hide/Show Tabs\n\nhide_tabs and show_tabs accept a tab/views index number, title, or path. They can also accept ranges like so: `5 to 9`\n\nhide_tabs and show_tabs accept a comma separated list of tabs:\n\n```yaml\ncustom_header:\n  hide_tabs: '5 to 9, 0, home'\n```\n\nor an array of tabs:\n\n```yaml\ncustom_header:\n  hide_tabs:\n    - 5 to 9\n    - 0\n    - home\n```\n\n### Tab Icons\n\nThe tab_icons option accepts a tab/views index number, title, or path. This option is mostly useful when used with [templates](#templates).\n\n```yaml\ncustom_header:\n  tab_icons:\n    0: mdi:skull\n    home: mdi:home\n    7: mdi:death-star-variant\n```\n","index":4}],"development":[{"title":"Development","id":"dev","url":"./#development/dev","content_html":"---\ntitle: Development\nindex: 1\n---\n\n## Development\n\nIf you'd like to help with development follow the instructions below to setup a devcontainer to work from.\n\n1. Fork and clone the repository\n2. Open the [devcontainer][devcontainer] and run `npm start`\n3. The compiled `.js` file will be accessible at `http://127.0.0.1:5000/custom-header.js` and in the `dist` directory\n4. On a running Home Assistant installation add this to your Lovelace `resources:`\n\n```yaml\n- url: 'http://127.0.0.1:5000/custom-header.js'\n  type: module\n```\n\n_Change \"127.0.0.1\" to the IP of your development machine._\n\n### Bonus\n\nIf you need a fresh test instance you can install a fresh Home Assistant instance inside the devcontainer as well.\n\n1. Run the command `dc start`\n2. Home Assistant will install and will eventually be running on port `9123`\n\n<!--Links -->\n\n[devcontainer]: https://code.visualstudio.com/docs/remote/containers\n","index":1},{"title":"Translation","id":"translation","url":"./#development/translation","content_html":"---\ntitle: Translation\nindex: 2\n---\n\n## Translation\n\nThe editor of Custom Header is fully translatable.\n\n### Change a translation\n\nFind the file that corespond with your language in [this directory](https://github.com/maykar/custom-header/master/src/localize/languages/), make your changes and crate a PR to have it in the next version.\n\n### Add a new language\n\n1: Add a new json file with your language code under `src/localize/languages/`\n2: Copy the contents of `en.json`to your new file.\n3: Start transalting.\n4: Add the language to`src/localize/localize.js`(see how`en`and`nb`) are added if you are not sure.\n5: Crate a PR to have it in the next version.\n","index":2}],"installation":[{"title":"HACS","id":"hacs","url":"./#installation/hacs","content_html":"---\ntitle: HACS\nindex: 1\n---\n\n## Installation with HACS\n\n[HACS](https://github.com/custom-components/hacs) is a custom integration that allows you to search for, discover, install, and manage custom additions to Home Assistant.\n\n1. In the HACS store search for \"custom header\" and follow the links to install.\n\n2. Add the code below to your resources and refresh the page, this code will also be displayed in HACS for easy copy/paste.\n\n```yaml\nresources:\n  - url: /community_plugin/custom-header/custom-header.js\n    type: module\n```\n","index":1},{"title":"Common Issues","id":"issues","url":"./#installation/issues","content_html":"---\ntitle: Common Issues\nindex: 3\n---\n\n## Common Installation Issues\n\n* There are 2 methods of installation: Manually or with HACS. Follow only one of these methods.\n* If this is your first custom add-on to HA or first time using the /www/ folder, restart after install.\n* Make sure you're using the [raw file from GitHub](https://github.com/thomasloven/hass-config/wiki/Lovelace-Plugins#2-download-the-plugin).\n\n[@thomasloven's lovelace guide](https://github.com/thomasloven/hass-config/wiki/Lovelace-Plugins) is a great resource for and intro to custom Lovelace plugins.\n","index":3},{"title":"Manual","id":"manual","url":"./#installation/manual","content_html":"---\ntitle: Manual\nindex: 2\n---\n\n## Manual Installation\n\n1. Download `custom-header.js` from the bottom of the [latest release page](https://github.com/maykar/custom-header/releases/latest) and place it under `www/custom-lovelace/compact-custom-header/` or another folder of your choosing (change url below to match).\n\n2. Add the code below to your resources and refresh the page.\n\n```yaml\nresources:\n    # Add to the version number at the end of this URL when updating.\n  - url: /local/custom-lovelace/custom-header/custom-header.js?v=0.0.1\n    type: module\n```\n","index":2}],"intro":[{"title":"Change Log","id":"changelog","url":"./#intro/changelog","content_html":"---\ntitle: Change Log\nindex: 3\n---\n\n## Change Log\n\n### Dec. 18th 2019 - v1.0.7\n\nFixes for:\n- View sizing\n- 12 hour template\n- Default tab\n- Current tab indicator\n\n### Dec. 17th 2019 - v1.0.6\n\n- Fix \"custom header\" menu item\n\n### Dec. 17th 2019 - v1.0.5\n\n- Addresses \"Tried to serve up '/config/www/community/custom-header/lit-element.js.map' but it does not exist\"\n\n### Dec. 17th 2019 - v1.0.4\n\n- View style fixes\n- Panel mode style fixes\n- Insert custom header option in disabled mode\n\n### Dec. 16th 2019 - v1.0.3\n\n- Fix default_tab's default so it's not 0 when not set\n- Make sure voice icon exists even if voice options are set in config\n- Resize header only in Lovelace view and only when needed\n\n### Dec. 16th 2019 - v1.0.2\n\n- Adds localization to editor\n- Fixes default tab not working in kiosk mode\n- Fixes reversed text on buttons\n- Adds hide_header to editor\n\n### Dec. 15th 2019 - v1.0.1\n\n- Added `hide_header: true` to hide the header and still allow sidebar to be swiped in from left.\n- Fixed background not filling behind header causing transparent headers to show no background underneath.\n\n### Dec. 15th 2019 - v1.0.0\n\n- Initial release\n","index":3},{"title":"Intro","id":"intro","url":"./#intro/intro","content_html":"---\ntitle: Intro\nindex: 1\n---\n\n## CUSTOM HEADER\n\nCustom Header adds enhancements and customization options to Home Assistant's Lovelace header. Custom Header is the replacement and successor of [Compact Custom Header](https://github.com/maykar/compact-custom-header).\n\n### Features\n\n- Per user/device configs\n- Every config item can be templated with Jinja\n- Style and hide any element in the header\n- Dynamically style header elements based on entity states/attributes\n- Buttons can be hidden, made into custom or templated text, or be placed in the options menu\n- Compact mode, kiosk mode, and footer mode\n- Default/starting view\n- But wait, there's more...\n\n<img style=\"border: 5px solid #767676;border-radius: 10px;max-width: 350px;width: 100%;box-sizing: border-box;\" src=\"https://github.com/maykar/custom-header/blob/master/demo.gif?raw=true\" alt=\"Demo\">\n","index":1},{"title":"Important Notes","id":"notes","url":"./#intro/notes","content_html":"---\ntitle: Important Notes\nindex: 2\n---\n\n## Important notes\n\n- Some options can remove your ability to edit with the UI\n- If you need to restore the default header add `?disable_ch` to the end of your URL: `http://192.168.1.2:8123/lovelace/1?disable_ch`\n- After using \"Raw Config Editor\" you will need to refresh the page to restore Custom Header\n- Swipe navigation is no longer included as it was with CCH. Use [Swipe Navigation](https://github.com/maykar/lovelace-swipe-navigation) instead.\n","index":2}],"issues":[{"title":"Issues","id":"issues","url":"./#issues/issues","content_html":"---\ntitle: Issues\n---\n\n## Issues\n\nIssues should be posted on [GitHub](https://github.com/maykar/custom-header/issues/new/choose) and preferably not on the forums. This makes tracking the issues easier and they will be resolved quicker.\n\nYou should always search [GitHub issues](https://github.com/maykar/custom-header/issues?q=is%3Aissue) (open and closed) as well as the forums to see if your issue has already been posted.\n\nIn order for me to investigate issues, please provide as much of the following info as possible:\n\n- A copy/paste of your Custom Header config\n- Any errors relevant to Custom Header found in the HA logs\n- Any relevant errors found in your browsers dev console (usually found by hitting F12)\n- The version of Home Assistant and Custom Header you are using\n- The browser type your are using\n\nWhen pasting in your config always place 3 backticks ` ``` ` above the first line and after the last line. Doing this will format it correctly so that I can find any errors in your config.\n\nIssues that don't provide the necessary information may not get a reply and may be closed.\n\n[Submit your issues here.](https://github.com/maykar/custom-header/issues/new/choose)\n","index":1338}],"styling":[{"title":"Advanced Styling","id":"advanced","url":"./#styling/advanced","content_html":"---\ntitle: Advanced Styling\nindex: 2\n---\n\n## CSS Variables\n\nYou can use these custom CSS variables in your HA theme to style Custom-Header.\n\n| CSS Var                     | DESCRIPTION                          |\n| :-------------------------- | :----------------------------------- |\n| --ch-background             | Background of the header             |\n| --ch-elements-color         | Color of all elements in header      |\n| --ch-menu-color             | Color of menu button                 |\n| --ch-voice-color            | Color of voice button                |\n| --ch-options-color          | Color of options button              |\n| --ch-all-tabs-color         | Color of all tabs                    |\n| --ch-notification-dot-color | Color of new notification indicator  |\n| --ch-tab-indicator-color    | Color of the current tab indicator   |\n| --ch-active-tab-color       | Color of the current tab's icon/text |\n\n## Custom CSS\n\nYou can add your own custom CSS to elements using the config options below.\n\nKeep in mind that this will be trial and error as these items already have CSS applied to them that you'll be overriding. Be sure to inspect the elements you're modifying to see the existing CSS.\n\nThese default styles are also subject to change when there are updates to HA or Custom Header. I cannot provide support for these options.\n\nFull example including all the available elements below. This example is untested and will most likely look pretty crazy if used.\n\n```yaml\ncustom_header:\n  header_css: 'background: green; padding: 5px'\n  stack_css: 'padding: 0; background: purple;' # This is the container that holds the header text and tabs.\n  header_text_css: 'font-family: \"Times New Roman\", Times, serif;'\n  active_tab_css: 'background: blue; color: #fff;'\n  options_list_css: 'background: #fff;' # CSS of the options drop-down menu.\n  menu_css: 'background: dimgrey;'\n  options_css: 'padding: 0 10px 0 15px;'\n  voice_css: 'color: pink;'\n  view_css: 'padding-top: 20px;' # This is the container that holds the cards under the header.\n  panel_view_css: 'padding-top: 20px;' # Same as view_css only when using panel view.\n  tab_container_css: 'background: pink;'\n  all_tabs_css: 'color: purple;'\n  tabs_css:\n    0: 'color: green;'\n    home: 'color: rgb(214, 122, 127)'\n    7: 'color: #fafafa; padding: 0 15px;'\n```\n","index":2},{"title":"styling","id":"styling","url":"./#styling/styling","content_html":"---\ntitle: styling\nindex: 1\n---\n\n## Styling Config\n\nAll color items accept [valid CSS colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\n\n| NAME                   | TYPE   | DESCRIPTION                                                                                                           |\n| :--------------------- | :----- | :-------------------------------------------------------------------------------------------------------------------- |\n| background             | string | Background of the header (accepts [background shorthand](https://developer.mozilla.org/en-US/docs/Web/CSS/background)) |\n| elements_color         | string | Color of all elements in header                                                                                       |\n| menu_color             | string | Color of menu button                                                                                                  |\n| voice_color            | string | Color of voice button                                                                                                 |\n| options_color          | string | Color of options button                                                                                               |\n| all_tabs_color         | string | Color of all tabs                                                                                                     |\n| notification_dot_color | string | Color of new notification indicator                                                                                   |\n| tab_indicator_color    | string | Color of the current tab indicator                                                                                    |\n| active_tab_color       | string | Color of the current tab's icon/text                                                                                  |\n| tabs_color             |        | Color of single tabs, more info below                                                                                 |\n\n### Tabs Color\n\ntabs_color accepts a tab/view's index number, title, or path.\n\n```yaml\ncustom_header:\n  tabs_color:\n    0: green\n    home: 'rgb(214, 122, 127)'\n    7: '#fafafa'\n```\n","index":1}],"support":[{"title":"Supporting Dev","id":"support","url":"./#support/support","content_html":"---\ntitle: Supporting Dev\n---\n\n## Supporting Development\n\nIf you'd like to offer support you can do so by providing friendly chat on Discord or the forums, buying me a coffee, or sponsoring me on GitHub.\n\n- [Buy me a coffee](https://www.buymeacoffee.com/FgwNR2l)\n- [Sponsor me on GitHub](https://github.com/sponsors/maykar)\n\nAlso consider supporting these fine individuals who have graciously helped me and this project. Go and check out their amazing work as well.\n\n- [@ludeeus](https://github.com/ludeeus) - Joakim Sørensen\n- [@bramkragten](https://github.com/bramkragten) - Bram Kragten\n- [@iantrich](https://github.com/iantrich) - Ian Richardson\n","index":1338}],"templates":[{"title":"Built-in Vars","id":"builtin","url":"./#templates/builtin","content_html":"---\ntitle: Built-in Vars\nindex: 3\n---\n\n## Built-in Variables\n\nThere are prebuilt variables for you to use in the table below. The format of the date/time items is automatically detected by default, but you may use the config variable `locale:` to set a different one if needed. [Here is a list of locale codes](http://download1.parallels.com/SiteBuilder/Windows/docs/3.2/en_US/sitebulder-3.2-win-sdk-localization-pack-creation-guide/30801.htm) to be used like this:\n\n```yaml\ncustom_header:\n  locale: en-gb\n```\n\n|VARIABLE|DESCRIPTION|\n|:-|:-|\n|{{ user }}| Logged in user's name\n|{{ time }}| Clock\n|{{ date }}| Date\n|{{ monthNum }}| Month's number\n|{{ monthNumLZ }}| Month's number with a leading zero\n|{{ monthNameShort }}| Abbreviated month's name\n|{{ monthNameLong }}| Month's name\n|{{ dayNum }}| Day's number\n|{{ dayNumLZ }}| Day's number with a leading zero\n|{{ dayNameShort }}| Abbreviated day's name\n|{{ dayNameLong }}| Day's name\n|{{ hours12 }}| Hour number for 12 hour clock\n|{{ hours12LZ }}| Hour number for 12 hour clock with a leading zero\n|{{ hours24}}| Hour number for 24 hour clock\n|{{ hours24LZ }}| Hour number for 24 hour clock with a leading zero\n|{{ minutes }}| Number of minutes\n|{{ minutesLZ }}| Number of minutes with a leading zero\n|{{ year2d }}| 2 digit year\n|{{ year4d }}| 4 digit year\n|{{ AMPM }}| AM or PM uppercase\n|{{ ampm }}| am or pm lowercase\n","index":3},{"title":"Custom Vars","id":"custom","url":"./#templates/custom","content_html":"---\ntitle: Custom Vars\nindex: 2\n---\n\n## Custom Variables\n\nTo create your own template variables use the `template_variables:` config option. Then you can use that variable in any of your config.\n\nIn the following example we set a variable \"home\" to return true if the input_boolean called \"home\" is \"on\". So compact mode will be on when that input_boolean is on.\n\n```yaml\ncustom_header:\n  template_variables: '{% set home = states.input_boolean.home.state  == \"on\" %}'\n  compact_mode: '{{ home }}'\n```\n","index":2},{"title":"Examples","id":"examples","url":"./#templates/examples","content_html":"---\ntitle: Examples\nindex: 4\n---\n\n## Examples Using Entities\n\nIf Paulus is \"home\" default tab is 0 else default tab is 5.\n\n```yaml\ncustom_header:\n  default_tab: '{% if is_state(\"device_tracker.paulus\", \"home\") %}0{% else %}5{% endif %}'\n```\n\nReturn true for compact mode if `input_boolean.home` is \"on\".\n\n```yaml\ncustom_header:\n  compact_mode: '{{ states.input_boolean.home.state  == \"on\" }}'\n```\n\n## Examples Using Built-in Vars\n\nThis will make the header text display a clock like this: `1:45 pm`.\n\n```yaml\ncustom_header:\n  header_text: '{{ hours12 }}:{{ minutesLZ }} {{ ampm }}'\n```\n\nThis will make the menu button display the date like this `Wed. Dec. 25 2019`.\n\n```yaml\ncustom_header:\n  button_text:\n    menu: '{{ dayNameShort }}. {{ monthNameShort }}. {{ dayNum }} {{ year4d }}'\n```\n","index":4},{"title":"Templates","id":"templates","url":"./#templates/templates","content_html":"---\ntitle: Templates\nindex: 1\n---\n\n## Jinja Templates\n\n- Every config item can be templated using Jinja templates\n- If the template is using an entity then Custom Header will update dynamically when that entity changes\n- Templates are also updated every minute for time-based templates\n- Templates must return the expected value for the config item\n\nIt is advisable to check your templates using the built in tool in HA. To find it select \"Developer Tools\" in the sidebar and then click the \"Template\" link at the top.\n\nThere are some built in template variables that you may use and you can also create your own.\n\n### Testing Templates:\n\nBy using the config option `test_template:` you can test that your template is returning the expected result. Add your template under `test_template:` and then look to your browsers Dev Tools console (F12) for the result. This will let you see if there are misplaced spaces, it's returning what you expect, or even if a Boolean is accidentally a string.\n\n```\ncustom_header:\n  test_template: \"{{states('sensor.alarm_panel_icon')}}\"\n```\n","index":1}]}